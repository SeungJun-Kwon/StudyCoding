package Stack;

import java.util.Scanner;

public class Stack_02 {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        StringBuilder sb = new StringBuilder();

        int t = scanner.nextInt();
        scanner.nextLine();

        Stack stack = new Stack();

        for (int n = 0; n < t; n++) {
            String input = scanner.nextLine();
            int num1 = 0;
            int num2 = 0;

            for (int i = 0; i < input.length(); i++) {
                if (isNumber(input.charAt(i))) {
                    stack.push(input.charAt(i) - '0');
                } else {
                    num2 = stack.pop();
                    num1 = stack.pop();

                    switch (input.charAt(i)) {
                        case '+':
                            num1 += num2;
                            break;
                        case '-':
                            num1 -= num2;
                            break;
                        case '*':
                            num1 *= num2;
                            break;
                    }

                    stack.push(num1);
                }
            }

            sb.append(stack.pop() + "\n");
        }

        scanner.close();

        System.out.println(sb);
    }

    static boolean isNumber(Character x) {
        return x >= 49 && x <= 57;
    }

    static class Stack {
        private final static int MAX = 10000;
        int[] value = new int[MAX];

        int top = -1;

        public Stack() {
            for (int i = 0; i < MAX; i++) {
                value[i] = 0;
            }

            top = -1;
        }

        public boolean empty() {
            return top == -1 ? true : false;
        }

        public int top() {
            return top == -1 ? -1 : value[top];
        }

        public void push(int x) {
            value[++top] = x;
        }

        public int pop() {
            return top == -1 ? -1 : value[top--];
        }

        public int size() {
            return top + 1;
        }
    }
}
