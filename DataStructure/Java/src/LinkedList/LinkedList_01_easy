package LinkedList;

import java.util.Scanner;

public class LinkedList_01_easy {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        StringBuilder sb = new StringBuilder();

        int t = scanner.nextInt();
        scanner.nextLine();

        LinkedList linkedList = new LinkedList();

        for (int i = 0; i < t; i++) {
            String input = scanner.nextLine();
            String[] inputSplit = input.split(" ");

            switch (inputSplit[0]) {
                case "addFront":
                    int x = Integer.parseInt(inputSplit[1]);
                    linkedList.addFront(x);
                    break;
                case "removeFront":
                    sb.append(linkedList.removeFront() + "\n");
                    break;
                case "front":
                    sb.append(linkedList.front() + "\n");
                    break;
                case "empty":
                    sb.append(linkedList.empty() + "\n");
                    break;
            }
        }

        scanner.close();

        System.out.println(sb);
    }

    static class LinkNode {
        private Integer data;
        private LinkNode link;

        public LinkNode(int x) {
            this.data = x;
            link = null;
        }

        public Integer getData() {
            if (data == null) {
                return -1;
            }

            return data;
        }

        public LinkNode getNext() {
            if (link == null) {
                return null;
            }

            return link;
        }
    }

    static class LinkedList {
        private LinkNode head;

        public void addFront(Integer x) {
            LinkNode linkNode = new LinkNode(x);

            if (head != null) {
                linkNode.link = head;
            }

            head = linkNode;
        }

        public Integer removeFront() {
            if (head == null) {
                return -1;
            }

            int result = head.getData();
            head = head.link;
            return result;
        }

        public Integer front() {
            if (head == null) {
                return -1;
            }

            return head.getData();
        }

        public Integer empty() {
            if (head == null) {
                return 1;
            } else {
                return 0;
            }
        }
    }
}
