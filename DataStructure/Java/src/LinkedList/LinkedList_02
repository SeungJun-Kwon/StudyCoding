package LinkedList;

import java.util.Scanner;

public class LinkedList_02 {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        StringBuilder sb = new StringBuilder();

        int t = scanner.nextInt();
        scanner.nextLine();

        LinkedList linkedList;

        for (int i = 0; i < t; i++) {
            linkedList = new LinkedList();

            String input = scanner.nextLine();
            String[] inputSplit = input.split(" ");
            for (String s : inputSplit) {
                linkedList.addBack(Integer.parseInt(s));
            }

            for (int j = 0; j < 3; j++) {
                input = scanner.nextLine();
                inputSplit = input.split(" ");
                int x = Integer.parseInt(inputSplit[1]);

                linkedList.delete(x);
            }

            sb.append(linkedList.showList() + "\n");
        }

        scanner.close();

        System.out.println(sb);
    }

    static class LinkNode {
        private Integer data;
        private LinkNode link;

        public LinkNode(int x) {
            this.data = x;
            link = null;
        }

        public Integer getData() {
            if (data == null) {
                return -1;
            }

            return data;
        }

        public LinkNode getNext() {
            if (link == null) {
                return null;
            }

            return link;
        }
    }

    static class LinkedList {
        private LinkNode head;
        private LinkNode tail;

        public void addFront(Integer x) {
            LinkNode linkNode = new LinkNode(x);

            if (head == null && tail == null) {
                linkNode.link = linkNode;
                head = linkNode;
                tail = linkNode;
            } else if (head != null && tail == null) {
                linkNode.link = head;
                tail = linkNode;
                head.link = tail;
            } else if (head != null && tail != null) {
                linkNode.link = head;
                head = linkNode;
                tail.link = head;
            }
        }

        public void addBack(Integer x) {
            if (head == null && tail == null) {
                addFront(x);
                return;
            }

            LinkNode linkNode = new LinkNode(x);

            if (head != null && tail == null) {
                head.link = linkNode;
                tail = linkNode;
                tail.link = head;
            } else if (head != null && tail != null) {
                tail.link = linkNode;
                tail = linkNode;
                tail.link = head;
            }
        }

        public Integer removeFront() {
            if (head == null) {
                return -1;
            }

            int result = head.getData();
            head = head.link;
            return result;
        }

        public void delete(int x) {
            int index = 0;

            if (head == null) {
                return;
            }

            LinkNode tmp = head;
            LinkNode prevTmp = null;

            while (index < x) {
                prevTmp = tmp;
                tmp = tmp.link;
                index++;
            }

            if (head == tmp && tail == tmp) {
                head = null;
                tail = null;
            } else if (head == tmp && tail != tmp) {
                head = head.link;
                tail.link = head;
                tmp = null;
            } else if (head != tmp && tail == tmp) {
                tail = prevTmp;
                tail.link = head;
                tmp = null;
            } else if (head != tmp && tail != tmp) {
                prevTmp.link = tmp.link;
                tmp = null;
            }
        }

        public Integer front() {
            if (head == null) {
                return -1;
            }

            return head.getData();
        }

        public Integer empty() {
            if (head == null) {
                return 1;
            } else {
                return 0;
            }
        }

        public String showList() {
            if (head == null) {
                return "-1";
            }

            String result = "";

            LinkNode tmp = head;

            while (tmp != null) {
                result += tmp.getData() + " ";

                if (tmp == tail) {
                    break;
                }

                tmp = tmp.link;
            }

            return result;
        }
    }
}
